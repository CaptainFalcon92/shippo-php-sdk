<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Shippo\API;

class CarrierParcelTemplates
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * List all carrier parcel templates
     *
     * List all carrier parcel template objects. <br> Use the following query string params to filter the results as needed. <br> <ul> <li>`include=all` (the default). Includes templates from all carriers </li> <li>`include=user`. Includes templates only from carriers which the user has added (whether or not they're currently enabled) </li> <li>`include=enabled`. includes templates only for carriers which the user has added and enabled </li> <li>`carrier=*token*`. filter by specific carrier, e.g. fedex, usps </li> </ul>
     *
     * @param  ?\Shippo\API\Models\Operations\IncludeT  $include
     * @param  ?string  $carrier
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\ListCarrierParcelTemplatesResponse
     */
    public function list(
        ?\Shippo\API\Models\Operations\IncludeT $include = null,
        ?string $carrier = null,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\ListCarrierParcelTemplatesResponse {
        $request = new \Shippo\API\Models\Operations\ListCarrierParcelTemplatesRequest();
        $request->include = $include;
        $request->carrier = $carrier;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/parcel-templates');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Shippo\API\Models\Operations\ListCarrierParcelTemplatesRequest::class, $request, $this->sdkConfiguration->globals));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\ListCarrierParcelTemplatesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->carrierParcelTemplateList = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\CarrierParcelTemplateList', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve a carrier parcel templates
     *
     * Fetches the parcel template information for a specific carrier parcel template, identified by the token.
     *
     * @param  string  $carrierParcelTemplateToken
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\GetCarrierParcelTemplateResponse
     */
    public function get(
        string $carrierParcelTemplateToken,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\GetCarrierParcelTemplateResponse {
        $request = new \Shippo\API\Models\Operations\GetCarrierParcelTemplateRequest();
        $request->carrierParcelTemplateToken = $carrierParcelTemplateToken;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/parcel-templates/{CarrierParcelTemplateToken}', \Shippo\API\Models\Operations\GetCarrierParcelTemplateRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\GetCarrierParcelTemplateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->carrierParcelTemplate = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\CarrierParcelTemplate', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}