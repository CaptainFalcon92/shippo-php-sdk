<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Shippo\API;

class ServiceGroups
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * List all service groups
     *
     * Returns a list of service group objects.
     *
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\ListServiceGroupsResponse
     */
    public function list(
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\ListServiceGroupsResponse {
        $request = new \Shippo\API\Models\Operations\ListServiceGroupsRequest();
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/service-groups');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\ListServiceGroupsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroupListResponse = $serializer->deserialize((string) $httpResponse->getBody(), 'array<Shippo\API\Models\Components\ServiceGroup>', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Create a new service group
     *
     * Creates a new service group.
     *
     * @param  \Shippo\API\Models\Components\ServiceGroupCreateRequest  $serviceGroupCreateRequest
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\CreateServiceGroupResponse
     */
    public function create(
        \Shippo\API\Models\Components\ServiceGroupCreateRequest $serviceGroupCreateRequest,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\CreateServiceGroupResponse {
        $request = new \Shippo\API\Models\Operations\CreateServiceGroupRequest();
        $request->serviceGroupCreateRequest = $serviceGroupCreateRequest;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/service-groups');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'serviceGroupCreateRequest', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\CreateServiceGroupResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroup = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\ServiceGroup', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Update an existing service group
     *
     * Updates an existing service group object. <br>The object_id cannot be updated as it is the unique identifier for the object.
     *
     * @param  ?string  $shippoApiVersion
     * @param  ?\Shippo\API\Models\Components\ServiceGroupUpdateRequest  $serviceGroupUpdateRequest
     * @return \Shippo\API\Models\Operations\UpdateServiceGroupResponse
     */
    public function update(
        ?string $shippoApiVersion = null,
        ?\Shippo\API\Models\Components\ServiceGroupUpdateRequest $serviceGroupUpdateRequest = null,
    ): \Shippo\API\Models\Operations\UpdateServiceGroupResponse {
        $request = new \Shippo\API\Models\Operations\UpdateServiceGroupRequest();
        $request->shippoApiVersion = $shippoApiVersion;
        $request->serviceGroupUpdateRequest = $serviceGroupUpdateRequest;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/service-groups');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'serviceGroupUpdateRequest', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\UpdateServiceGroupResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceGroup = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\ServiceGroup', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Delete a service group
     *
     * Deletes an existing service group using an object ID.
     *
     * @param  string  $serviceGroupId
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\DeleteServiceGroupResponse
     */
    public function delete(
        string $serviceGroupId,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\DeleteServiceGroupResponse {
        $request = new \Shippo\API\Models\Operations\DeleteServiceGroupRequest();
        $request->serviceGroupId = $serviceGroupId;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/service-groups/{ServiceGroupId}', \Shippo\API\Models\Operations\DeleteServiceGroupRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\DeleteServiceGroupResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 204) {
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}