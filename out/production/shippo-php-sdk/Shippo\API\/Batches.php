<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Shippo\API;

class Batches
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Create a batch
     *
     * Creates a new batch object for purchasing shipping labels for many shipments at once. Batches are created asynchronously. This means that the API response won't include your batch shipments yet. You need to retrieve the batch later to verify that all batch shipments are valid.
     *
     * @param  \Shippo\API\Models\Components\BatchCreateRequest  $batchCreateRequest
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\CreateBatchResponse
     */
    public function create(
        \Shippo\API\Models\Components\BatchCreateRequest $batchCreateRequest,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\CreateBatchResponse {
        $request = new \Shippo\API\Models\Operations\CreateBatchRequest();
        $request->batchCreateRequest = $batchCreateRequest;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/batches');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'batchCreateRequest', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\CreateBatchResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\Batch', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve a batch
     *
     * Returns a batch using an object ID. <br> Batch shipments are displayed 100 at a time.  You can iterate 
     * through each `page` using the `?page= query` parameter.  You can also filter based on batch shipment 
     * status, for example, by passing a query param like `?object_results=creation_failed`. <br> 
     * For more details on filtering results, see our guide on <a href="https://docs.goshippo.com/docs/api_concepts/filtering/" target="blank"> filtering</a>.
     *
     * @param  string  $batchId
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\GetBatchResponse
     */
    public function get(
        string $batchId,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\GetBatchResponse {
        $request = new \Shippo\API\Models\Operations\GetBatchRequest();
        $request->batchId = $batchId;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/batches/{BatchId}', \Shippo\API\Models\Operations\GetBatchRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\GetBatchResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\Batch', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Add shipments to a batch
     *
     * Adds batch shipments to an existing batch.
     *
     * @param  string  $batchId
     * @param  array<\Shippo\API\Models\Components\BatchShipmentCreateRequest>  $requestBody
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\AddShipmentsToBatchResponse
     */
    public function addShipments(
        string $batchId,
        array $requestBody,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\AddShipmentsToBatchResponse {
        $request = new \Shippo\API\Models\Operations\AddShipmentsToBatchRequest();
        $request->batchId = $batchId;
        $request->requestBody = $requestBody;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/batches/{BatchId}/add_shipments', \Shippo\API\Models\Operations\AddShipmentsToBatchRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\AddShipmentsToBatchResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\Batch', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Purchase a batch
     *
     * Purchases an existing batch with a status of `VALID`. 
     * Once you send a POST request to the purchase endpoint the batch status will change to `PURCHASING`. 
     * When all the shipments are purchased, the status will change to `PURCHASED` and you will receive a 
     * `batch_purchased` webhook indicating that the batch has been purchased
     *
     * @param  string  $batchId
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\PurchaseBatchResponse
     */
    public function purchase(
        string $batchId,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\PurchaseBatchResponse {
        $request = new \Shippo\API\Models\Operations\PurchaseBatchRequest();
        $request->batchId = $batchId;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/batches/{BatchId}/purchase', \Shippo\API\Models\Operations\PurchaseBatchRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\PurchaseBatchResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\Batch', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }

    /**
     * Remove shipments from a batch
     *
     * Removes shipments from an existing batch shipment.
     *
     * @param  string  $batchId
     * @param  array<string>  $requestBody
     * @param  ?string  $shippoApiVersion
     * @return \Shippo\API\Models\Operations\RemoveShipmentsFromBatchResponse
     */
    public function removeShipments(
        string $batchId,
        array $requestBody,
        ?string $shippoApiVersion = null,
    ): \Shippo\API\Models\Operations\RemoveShipmentsFromBatchResponse {
        $request = new \Shippo\API\Models\Operations\RemoveShipmentsFromBatchRequest();
        $request->batchId = $batchId;
        $request->requestBody = $requestBody;
        $request->shippoApiVersion = $shippoApiVersion;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/batches/{BatchId}/remove_shipments', \Shippo\API\Models\Operations\RemoveShipmentsFromBatchRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Shippo\API\Models\Operations\RemoveShipmentsFromBatchResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batch = $serializer->deserialize((string) $httpResponse->getBody(), 'Shippo\API\Models\Components\Batch', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequest = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}